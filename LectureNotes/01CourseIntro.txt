What motivated me to design this book? There are already many great books on programming languages. Existing books on programming languages can teach you how to use advanced programming language features, implement languages, reason about the mathematical theories underlying languages, reason rigorously about correctness, and so much more. Experts in human-centered computing have written countless books of their own, which can cover that topic in far greater depth than a book that approaches human-centered computing through the lens of programming languages. Why, then, does the world need a book that puts these two perspectives together?

The answer is that this book was created to address the core challenge I face in teaching the programming languages electives at WPI: modern students deserve a course and a book which address programming languages as a breadth topic. My students will go on to a wide range of careers: many will be professional programmers, some will transition into a job where their computer science knowledge takes on a background role as it informs their knowledge of the world around them, and some will continue down the academic road. I want this book to provide something for all of them, whether graduate or undergraduate, computer science major or not. The breadth approach accomplishes this. Breadth is also best-suited for the realities of the digital age. If an alum forgets the details of a classic algorithm five years after graduation, they can always look it up, but if a student graduates without being shown the breadth of the discipline, they might never think to go looking for what they need.
At the same time, this book will not be devoid of classic algorithms and classic results; a breadth approach includes these, but does so in moderation. In fact, we will start narrowly with the classics, teaching core technologies used for language implementation and core vocabulary for technical discussion of languages, then branch out into an increasingly humanistic approach, incorporating human-centered works which do everything from perform user studies to guide language iteration to employ humanistic critiques to consider the role of programming languages in contemporary social issues. We will have a little fun along the way, using programming languages for creative expression as case studies in how the disciplinary and interdisciplinary sides of mind can collaborate in the work of programming language design. At times, this book will depart from the norms of the textbook genre by incorporating small novel research results or *autoethnographic* experiences from the author's life. When we do so, the discussion will remain scholarly. Learning how to explore previously-unexplored ideas and how to bring one's own experience into a rigorous academic experience are both part of a complete education.

This book is designed in the paradigm of open education, meaning the author publishes the full teaching materials openly so that self-taught students can engage on their own and so that educators at other institutions can easily incorporate this work into their own. In addition to the typical exercises presented in textbooks, this book includes recommendations for more comprehensive assignments or projects, as well as direct suggestions for activities that teachers can perform in a classroom. These recommendations serve a dual purpose to the author's students at WPI, to help them prepare for an active class session and get the most out of it. Only solutions to WPI homework assignments are left unpublished, and instructors elsewhere are encouraged to contact the author for access. Though solutions are unpublished, autograding code for assignments is intentionally published because this approach is closest to real-world practice. Real-world programmers often debug their code by exploring its behavior on a variety of test cases, so this skill is valuable use of a student's time, but guessing at the grader's inner workings or intentions would distract from the heart of the educational experience.

For students in the accompanying course: in keeping with this spirit, we will engage with, but not fully commit to, an educational philosophy called *ungrading*, a philosophy that says traditional grades are counterproductive in that they replace a student's natural intrinsic motivation for the submit with the external motivation to optimize for high grades. The exact grading structures will vary from year to year and students should always consult the latest syllabus, but in general I seek to strike a balance between students' desire for me to provide them with a source of external accountability and my desire to provide space for free exploration of aspects that interest you. On that note, the references at the end of each chapter are not merely good scholarly practice, but they are an opportunity for you to dig further in the topics that most interest you and to engage with the latest research on the subject.

Which language?

The fields.

Politics

Classroom activities:
Exercises

Student Help Hours / "Office Hours":


** Life Resources

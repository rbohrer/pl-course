Lecture 22: Critical Code Studies, Part 2

Reading choices for today:
(long, feel free to just read a few parts..)
https://www.tandfonline.com/doi/pdf/10.1080/07370024.2018.1512413
http://katta.mere.st/wp-content/uploads/2020/03/Individuality-over-function_revised.pdf

The previous lecture broached general-purpose inclusive
design strategies through metaphors that tied identity
to type systems. Today we'll start from a more specific
focus: disability issues in programming languages
specifically, then work our way back out to the critical
study of disability (Disability Studies)

* Disability Studies for PL
Among software, programming languages have unique accessibility
concerns. Those concerns have unique impacts, yet are rarely given
proper attention.

** Importance
I am hesitant to rank the importance of different accessibility
concerns, because that lends itself too easily to treating us as second
class citizens or treating accessibility as optional. However, it is
worthwhile characterizing how I think about the accessibility concerns
that matter to me personally, and worth giving qualitative distinctions
in the impacts of different accessibility failures.

When I think of accessibility, I like to think about infrastructure.
When I walk around town, uneven broken sidewalks make me trip, and may
make wheelchair-users unable to navigate town without a vehicle. Icy
sidewalks and roads mean no leaving the house without my cane. I know
where every handrail in Fuller is and I know they're a bit weird. On
the mental side, old buildings with thin walls aggravate auditory
sensory problems. All of these are infrastructure.


Accessible infrastructure is the foundation of a livable life for a
disabled person. If we wish to live inside, we need accessible
housing, which is scarce. If we wish to do any daily computing task,
we need accessible computing systems. If we wish to stay employed or
fed, we need accessible transportation. Without accessible
infrastructure, we have no job, home, or community.

PLs are the infrastructure of software, and PL designers must carry
the responsibility of accessible infrastructure. Programming is a huge
part of modern life, for everyone from career developers to Excel users
to children. Disabled people exist in all these spaces, and if we are
not provided with infrastructure, then disabled people are erased from
all these roles.

** Invisibility
In common discussion, disabilities are often divided into "visible"
disabilities, where able people will notice you are disabled on first
glance, vs. "invisible" disabilities, where they do not. This
distinction is overly simplistic, because visibility is in the eye of
the beholder. When I run into another member of my disability groups in
public, we can often find one another based on the quirks that affect
us - we are visible to each other. In other words, *positionality*
matters; the disabled person sees things that an abled person will not
see, and she sees them in a different way.

Though no disability is universally invisible, it is true that many
disability issues are invisible to those they don't affect.

* A survey of PL accessibility issues
In which case, let's take time to go through common accessibility
issues for PLs

** Visual accessibility
Because programming languages are predominantly read through visual
interfaces, visual disabilities are a major area of need.

- Whitespace sensitivity:
Invisible spaces on the screen are the home to an invisible issue!
Some programming languages, most famously Python, are whitespace-
sensitive. This is an issue for visually-disabled programmers, who
typically rely on screen readers to read computer text aloud to them.
Traditionally, screen readers do not read the whitespace aloud, leaving
whitespace-sensitive code unreadable to screen reader users. Python's
approach to including visually-disabled programmers is a half-measure:
special "begin" and "end" keywords can be used to write whitespace-
insensitive code. This half-measure is a great example of how
accessibility measures rarely center the disabled person, because it
leaves the following issues unresolved:
- Reading other people's code is a huge part of programming. Abled
Python programmers do not write screen-reader-compatible code, so
visually-disabled Python programmers will still have to fight against
the majority of code available.
- By giving accessible code a distinctly different syntax from the
inaccessible majority, Python asks visually-disabled programmers to put
a target on their own back, advertising their difference to a public
where it may not always be received with acceptance. They might have to
deal with insults from other programmers telling them to write "real"
Python instead.

- Line Length
Though indentation-sensitive syntax remains popular today, other space-
sensitive languages have faded in popularity. Early languages like
Fortran and COBOL assigned special meanings to certain columns of a
line. In practice, certain programmers may still need to limit the
number of columns (e.g., the culture of their programming language
advocates for lines under 80 characters). As designers of language
practices, we shouldbe mindful of the disability implications of line
length. Longer lines typically correspond to smaller font sizes, so
line limits, rather than being a mere relic of the past, are supportive
of visual disabilities that require large-print text.

- Imagery
The assigned reading described a programming language Torino designed
for visually-disabled children. Visual disability is especially
important for languages aimed at children. This is because the most
popular programming languages for children (e.g., Scratch) are all
based on both visual input (block-based design) and visual output
(e.g., animations). These languages, which aim to make coding more
accessible to children, unwittingly make it *less* accesssible to
visually-disabled children.

There are several possible approaches to such a language. Mainstream
progamming languages, being text-based, are accessible through screen-
readers, but their reliance on verbal skills is only practical for
populations which have developed those verbal skills. For younger
children, an alternative approach is needed, and that is the one Torino
takes: provide *tactile* interfaces.

Tactile interfaces, similarly to protactile sign language, are
particularly accessible to deafblind people; oral programming languages
are a plausible approach for hearing blind people but not deafblind.

** Musculoskeletal+Motor
Motor disabilities, including musculoskeletal ones, arise largely on
the input side of programming.

EXERCISE: Have you ever had a repetitive strain injury (RSI)?
Have you ever known someone who did? (Example: Carpal Tunnel Syndrome)

RSIs are known as a major occupational hazard of programming. On their
own, they are an injury rather than a disability, but can grow into a
disability and certainly overlap with disability.

If you have ever seen my keyboard, you know I use a bowled, split
keyboard because typing pain is a disability symptom for me. And on
some level, PL design actually plays into that pain, believe it or not!

EXERCISE: In terms of the keyboard, how are PLs different from other
text?

Programming makes heavy use of punctuation, and one of the first rules
of ergonomics is to minimize straining the fingers over long
distances, especially if it require compressing the medial or ulnar
nerves, for example when stretching the pinky to a distant
region. Disabled coders can handle much of this on own - for years, I
used the Programmer Dvorak keyboard layout because it minimized the
distance covered to punctuation symbols, but poor support for the
format led me back to less-ergonomic ones. PL designers could consider
less reliance on out-of-the-way punctuation, which would reduce the
need to build custom keyboard layouts.

Not everything is about me, however, and the reliance on typing can be
an ever bigger obstacle for programmers with other disabilities.
One-handed keyboard layouts can support single amputees, but keyboard
input can be completely impossible for disabilities such as muscular
dystrophy and for multiple amputees. Some people in these groups use
dictation with a person to program, but it is worth exploring the
design of languages with good support for automated transcription, to
provide greater programming autonomy.

* Disability Studies for HCI
Most of the research on disability and CS comes from HCI, so we draw
on that research, even if we apply it to humans interacting with PLs.
The historical trend of disability in HCI follows broader social
trends.  Older research tends to be performed by abled researchers
with a focus on providing functionality to disabled subjects,
especially functionalities that provide increased ability to live
independently.

Though much legitimately useful assistive technology has come out of
older HCI research, there is a recent emphasis in bringing research
into alignment with the contemporary disability rights movement.  See
the CHI workshop "Nothing About Us Without Us" for a variety of such
perspectives. As the workshop title suggests, the contemporary
emphasis is on centering actual disabled people in the research
process. This means listening to disabled researchers in particular,
and also promoting the use of methods such as participatory design for
abled researchers to provide greater agency to disabled people in
their research.

I've highlighted one paper from the CHI workshop as an assigned
reading for this class: "Individuality over function: the role of
technology in disability identity". This paper analyzes case studies
in Kenya, Uganda, and Jordan. Their analysis highlights the importance
of representing Global South nations in disability research: these
three nations lack the legal protections for disabled people that are
common in Global North countries, and study subjects reported levels
of disability stigma in their daily lives that are beyond the typical
levels found in countries such as the US. For this reason, the social
aspects of disability took on a pronounced significance compared to
the functional aspects.

Visually-impaired Kenyans highlighted the need for blending functional
improvement with community education about disabled people's
needs. For example, in a speculative design exercise, the
best-received idea was an intelligent traffic light that alerted abled
drivers to disabled pedestrians' need for extra time to cross the
street safely. In a separate case study, Kenyan wheelchair users
pointed to wheelchair aesthetics as key to improving their
self-esteem. Jordanian and Uganda prosthetic wearers presented the
flip-side to community education: because ableism is prominent in
their lives, they expressed the need to blend in for
safety. Aesthetics of prosthetics, such as matching the skin color and
size of the wearer, *are* a practical concern, because they allow
wearers to blend into abled society for their own safety.

The paper frames these needs as a need for individuality over
functionality. It is important to recognize that the notion of
individuality is itself context-sensitive. In the US, individuality
often corresponds to visibility, self-determination, and the freedom
to ignore what the people around us think. In contrast, the study
subjects called for a context-sensitive approach to accessibility
which allows them to prioritize local, community-specific needs of the
individual.

** Comparison/Mini-Summary

These concerns may seem abstract and detached from PL design at first,
but they are actually quite relevant to the PL accessibility case
studies I shared:

- Whitespace in Python: Part of my criticism of Python is that its
  accessibility features for visually disabled people require them to
  visibly announce their disability. Control over whether or not to
  blend in is the same concern cited by disabled Ugandans and
  Jordanians.

- Programming for Visually-Disabled Children: The use of tangible
  rather than verbal programming in Torino serves in part to make the
  activity fun for children. Given the stresses of ableism in a
  child's life, this social aspect takes on pronounced importance.

- Musculoskeletal Accessibility

The only person I know who codes by voice is someone who did so
because of RSI: http://www.rntz.net/talon/index.html. That person is a
programming language researcher. Having *researchers* who have lived
through these accessibility needs is important to the culture of
academia, it escapes the trap of "nothing about us without us" and
puts disabled knowledge in the position to create change.

* Disability in Academia
Content notice: the discussions of ableism in this section are a bit
more personal.

We are all in academia, so I want to take some course time to talk
about disability and ableism in academia. This section is especially
for any disabled students in the course: I believe it's important to
talk about our own issues and feel seen. If abled students learn
something in the process too, that's a bonus.

Modern academia is defined by a stress culture. People compete on how
tired they are and how little sleep they get. They compete to be the
least healthy. This model fundamentally does not work for disabled
people. In an average day, I lose multiple hours of good function to
my disability, whether that's because of doctor appointments, physical
therapy exercises, or waiting for symptoms to subside. I cannot work
by the kinds of schedules that I am regularly asked to. When
colleagues try to schedule work for weekends or evenings, or on short
notice, I'm repeatedly forced to go on the defensive. Everybody
deserves time to rest, but *I will break* if I let people make me work
during those times. It is an exhausting culture where disabled people
feel compelled to constantly defend basic needs. We feel this way
because as soon as we ask for more than the basic right to exist in
public, we are consistently ignored, spoken over, or worse.

I only personally know of one other physically disabled person with a
PhD in programming languages. I do not know whether that person is
staying in academia or not. I know that disabled people get about
1% of research grants in the US, and that is a lonely number.

IN-CLASS: Make time if any disabled students wish to share their own
experiences.

* Foreshadowing: Autonomy and Views

In a few lectures, we'll look at a language called Penrose which
creates visual outputs. I personally believe such languages hold
promise for accessibility work in the future. Part of accessibility as
a PL designer is giving disabled programmers and users the right to
impose their own semantics on code, their own views on the same data,
which provide for their own needs. We might spend some time talking
about how one would do this in Penrose when the time comes.
